{"ast":null,"code":"var _jsxFileName = \"/workspaces/DoctorDashboard/client/src/contexts/DoctorContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { fetchDoctorProfile } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorContext = /*#__PURE__*/createContext();\nexport const useDoctorContext = () => {\n  _s();\n  return useContext(DoctorContext);\n};\n_s(useDoctorContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const DoctorProvider = ({\n  children\n}) => {\n  _s2();\n  const [doctor, setDoctor] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadDoctorProfile = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchDoctorProfile();\n        setDoctor(data);\n        setError(null);\n      } catch (err) {\n        console.error('Error fetching doctor profile:', err);\n        setError('Failed to load doctor profile. Please try again later.');\n\n        // For demo purposes, set mock data if API fails\n        setDoctor({\n          _id: 'demo-doctor-id',\n          name: 'Dr. John Smith',\n          specialization: 'Cardiologist',\n          email: 'john.smith@example.com',\n          phone: '+1 (555) 123-4567',\n          status: 'approved',\n          profilePicture: null,\n          qualifications: [{\n            degree: 'MD',\n            institution: 'Harvard Medical School',\n            year: '2010'\n          }, {\n            degree: 'Cardiology Specialization',\n            institution: 'Mayo Clinic',\n            year: '2015'\n          }],\n          about: 'Experienced cardiologist with over 10 years of practice in treating various heart conditions.',\n          consultationFee: 150,\n          availability: {\n            monday: [{\n              start: '09:00',\n              end: '12:00'\n            }, {\n              start: '14:00',\n              end: '17:00'\n            }],\n            tuesday: [{\n              start: '09:00',\n              end: '12:00'\n            }, {\n              start: '14:00',\n              end: '17:00'\n            }],\n            wednesday: [{\n              start: '09:00',\n              end: '12:00'\n            }],\n            thursday: [{\n              start: '14:00',\n              end: '17:00'\n            }],\n            friday: [{\n              start: '09:00',\n              end: '12:00'\n            }, {\n              start: '14:00',\n              end: '17:00'\n            }],\n            saturday: [],\n            sunday: []\n          }\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadDoctorProfile();\n  }, []);\n  const updateDoctorInfo = async updatedInfo => {\n    // This would normally make an API call to update the doctor profile\n    // For now, just update the local state\n    setDoctor({\n      ...doctor,\n      ...updatedInfo\n    });\n    return {\n      success: true\n    };\n  };\n  const value = {\n    doctor,\n    loading,\n    error,\n    updateDoctorInfo\n  };\n  return /*#__PURE__*/_jsxDEV(DoctorContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 10\n  }, this);\n};\n_s2(DoctorProvider, \"1p7+48nxCoi39F5hJCeMCSmxOdA=\");\n_c = DoctorProvider;\nexport default DoctorContext;\nvar _c;\n$RefreshReg$(_c, \"DoctorProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","fetchDoctorProfile","jsxDEV","_jsxDEV","DoctorContext","useDoctorContext","_s","DoctorProvider","children","_s2","doctor","setDoctor","loading","setLoading","error","setError","loadDoctorProfile","data","err","console","_id","name","specialization","email","phone","status","profilePicture","qualifications","degree","institution","year","about","consultationFee","availability","monday","start","end","tuesday","wednesday","thursday","friday","saturday","sunday","updateDoctorInfo","updatedInfo","success","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/DoctorDashboard/client/src/contexts/DoctorContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { fetchDoctorProfile } from '../utils/api';\n\nconst DoctorContext = createContext();\n\nexport const useDoctorContext = () => useContext(DoctorContext);\n\nexport const DoctorProvider = ({ children }) => {\n  const [doctor, setDoctor] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const loadDoctorProfile = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchDoctorProfile();\n        setDoctor(data);\n        setError(null);\n      } catch (err) {\n        console.error('Error fetching doctor profile:', err);\n        setError('Failed to load doctor profile. Please try again later.');\n        \n        // For demo purposes, set mock data if API fails\n        setDoctor({\n          _id: 'demo-doctor-id',\n          name: 'Dr. John Smith',\n          specialization: 'Cardiologist',\n          email: 'john.smith@example.com',\n          phone: '+1 (555) 123-4567',\n          status: 'approved',\n          profilePicture: null,\n          qualifications: [\n            { degree: 'MD', institution: 'Harvard Medical School', year: '2010' },\n            { degree: 'Cardiology Specialization', institution: 'Mayo Clinic', year: '2015' }\n          ],\n          about: 'Experienced cardiologist with over 10 years of practice in treating various heart conditions.',\n          consultationFee: 150,\n          availability: {\n            monday: [{ start: '09:00', end: '12:00' }, { start: '14:00', end: '17:00' }],\n            tuesday: [{ start: '09:00', end: '12:00' }, { start: '14:00', end: '17:00' }],\n            wednesday: [{ start: '09:00', end: '12:00' }],\n            thursday: [{ start: '14:00', end: '17:00' }],\n            friday: [{ start: '09:00', end: '12:00' }, { start: '14:00', end: '17:00' }],\n            saturday: [],\n            sunday: []\n          }\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadDoctorProfile();\n  }, []);\n\n  const updateDoctorInfo = async (updatedInfo) => {\n    // This would normally make an API call to update the doctor profile\n    // For now, just update the local state\n    setDoctor({ ...doctor, ...updatedInfo });\n    return { success: true };\n  };\n\n  const value = {\n    doctor,\n    loading,\n    error,\n    updateDoctorInfo\n  };\n\n  return <DoctorContext.Provider value={value}>{children}</DoctorContext.Provider>;\n};\n\nexport default DoctorContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}