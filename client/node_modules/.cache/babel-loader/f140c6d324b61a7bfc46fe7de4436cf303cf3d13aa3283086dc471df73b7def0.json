{"ast":null,"code":"import axios from 'axios';\n\n// Base API URL\nconst API_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n/**\n * Fetch doctor appointments\n * @returns {Promise<Array>} List of appointments\n */\nexport const fetchDoctorAppointments = async () => {\n  try {\n    // In a real implementation, this would make an API call\n    // For demo purposes, we'll return mock data\n    return [{\n      _id: 'appt1',\n      appointmentDate: '2025-04-15',\n      appointmentTime: '09:30',\n      patient: {\n        name: 'Jane Smith',\n        email: 'jane.smith@example.com',\n        phone: '+1 (555) 987-6543'\n      },\n      reason: 'Annual checkup and consultation about recent blood test results.',\n      status: 'confirmed',\n      notes: ''\n    }, {\n      _id: 'appt2',\n      appointmentDate: '2025-04-15',\n      appointmentTime: '11:00',\n      patient: {\n        name: 'Michael Johnson',\n        email: 'michael.j@example.com',\n        phone: '+1 (555) 123-7890'\n      },\n      reason: 'Follow-up appointment after surgery.',\n      status: 'confirmed',\n      notes: 'Patient reported mild pain in the incision area.'\n    }, {\n      _id: 'appt3',\n      appointmentDate: '2025-04-16',\n      appointmentTime: '14:30',\n      patient: {\n        name: 'Emily Wilson',\n        email: 'emily.w@example.com',\n        phone: '+1 (555) 456-1230'\n      },\n      reason: 'First consultation for persistent headaches.',\n      status: 'pending',\n      notes: ''\n    }, {\n      _id: 'appt4',\n      appointmentDate: '2025-04-17',\n      appointmentTime: '10:15',\n      patient: {\n        name: 'Robert Brown',\n        email: 'robert.b@example.com',\n        phone: '+1 (555) 789-4560'\n      },\n      reason: 'Regular checkup for heart condition.',\n      status: 'completed',\n      notes: 'Patient is responding well to medication. Blood pressure normal.'\n    }, {\n      _id: 'appt5',\n      appointmentDate: '2025-04-18',\n      appointmentTime: '15:45',\n      patient: {\n        name: 'Sophia Garcia',\n        email: 'sophia.g@example.com',\n        phone: '+1 (555) 321-6547'\n      },\n      reason: 'Consultation about allergies and possible treatments.',\n      status: 'cancelled',\n      notes: 'Patient called to cancel due to scheduling conflict.'\n    }];\n  } catch (error) {\n    console.error('Error fetching appointments:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch doctor profile\n * @returns {Promise<Object>} Doctor profile\n */\nexport const fetchDoctorProfile = async () => {\n  try {\n    // In a real implementation, this would make an API call\n    // For demo purposes, we'll return mock data\n    return {\n      _id: 'demo-doctor-id',\n      name: 'Dr. John Smith',\n      specialization: 'Cardiologist',\n      email: 'john.smith@example.com',\n      phone: '+1 (555) 123-4567',\n      status: 'approved',\n      profilePicture: null,\n      qualifications: [{\n        degree: 'MD',\n        institution: 'Harvard Medical School',\n        year: '2010'\n      }, {\n        degree: 'Cardiology Specialization',\n        institution: 'Mayo Clinic',\n        year: '2015'\n      }],\n      about: 'Experienced cardiologist with over 10 years of practice in treating various heart conditions.',\n      consultationFee: 150,\n      availability: {\n        monday: [{\n          start: '09:00',\n          end: '12:00'\n        }, {\n          start: '14:00',\n          end: '17:00'\n        }],\n        tuesday: [{\n          start: '09:00',\n          end: '12:00'\n        }, {\n          start: '14:00',\n          end: '17:00'\n        }],\n        wednesday: [{\n          start: '09:00',\n          end: '12:00'\n        }],\n        thursday: [{\n          start: '14:00',\n          end: '17:00'\n        }],\n        friday: [{\n          start: '09:00',\n          end: '12:00'\n        }, {\n          start: '14:00',\n          end: '17:00'\n        }],\n        saturday: [],\n        sunday: []\n      }\n    };\n  } catch (error) {\n    console.error('Error fetching doctor profile:', error);\n    throw error;\n  }\n};\n\n/**\n * Update doctor profile\n * @param {Object} profileData - Updated profile data\n * @returns {Promise<Object>} Updated doctor profile\n */\nexport const updateDoctorProfile = async profileData => {\n  try {\n    // In a real implementation, this would make an API call\n    // For demo purposes, we'll just return the updated data\n    return {\n      ...profileData,\n      success: true\n    };\n  } catch (error) {\n    console.error('Error updating doctor profile:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch doctor's unavailable dates\n * @returns {Promise<Array>} List of unavailable dates\n */\nexport const fetchDoctorUnavailableDates = async () => {\n  try {\n    // In a real implementation, this would make an API call\n    // For demo purposes, we'll return mock data\n    return [{\n      _id: 'date1',\n      date: '2025-05-15',\n      reason: 'Personal leave'\n    }, {\n      _id: 'date2',\n      date: '2025-06-10',\n      reason: 'Conference attendance'\n    }, {\n      _id: 'date3',\n      date: '2025-06-11',\n      reason: 'Conference attendance'\n    }, {\n      _id: 'date4',\n      date: '2025-07-01',\n      reason: 'Vacation'\n    }, {\n      _id: 'date5',\n      date: '2025-07-02',\n      reason: 'Vacation'\n    }, {\n      _id: 'date6',\n      date: '2025-07-03',\n      reason: 'Vacation'\n    }];\n  } catch (error) {\n    console.error('Error fetching unavailable dates:', error);\n    throw error;\n  }\n};\n\n/**\n * Add an unavailable date\n * @param {string} date - Date in YYYY-MM-DD format\n * @param {string} reason - Reason for unavailability\n * @returns {Promise<Object>} Added unavailable date\n */\nexport const addUnavailableDate = async (date, reason) => {\n  try {\n    // In a real implementation, this would make an API call\n    // For demo purposes, we'll just return the data with a generated ID\n    const newDateId = 'date' + Date.now();\n    return {\n      _id: newDateId,\n      date,\n      reason\n    };\n  } catch (error) {\n    console.error('Error adding unavailable date:', error);\n    throw error;\n  }\n};\n\n/**\n * Remove an unavailable date\n * @param {string} dateId - ID of the unavailable date to remove\n * @returns {Promise<Object>} Confirmation of removal\n */\nexport const removeUnavailableDate = async dateId => {\n  try {\n    // In a real implementation, this would make an API call\n    // For demo purposes, we'll just return a success message\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Error removing unavailable date:', error);\n    throw error;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","fetchDoctorAppointments","_id","appointmentDate","appointmentTime","patient","name","email","phone","reason","status","notes","console","fetchDoctorProfile","specialization","profilePicture","qualifications","degree","institution","year","about","consultationFee","availability","monday","start","end","tuesday","wednesday","thursday","friday","saturday","sunday","updateDoctorProfile","profileData","success","fetchDoctorUnavailableDates","date","addUnavailableDate","newDateId","Date","now","removeUnavailableDate","dateId"],"sources":["/workspaces/DoctorDashboard/client/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Base API URL\nconst API_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n/**\n * Fetch doctor appointments\n * @returns {Promise<Array>} List of appointments\n */\nexport const fetchDoctorAppointments = async () => {\n  try {\n    // In a real implementation, this would make an API call\n    // For demo purposes, we'll return mock data\n    return [\n      {\n        _id: 'appt1',\n        appointmentDate: '2025-04-15',\n        appointmentTime: '09:30',\n        patient: {\n          name: 'Jane Smith',\n          email: 'jane.smith@example.com',\n          phone: '+1 (555) 987-6543'\n        },\n        reason: 'Annual checkup and consultation about recent blood test results.',\n        status: 'confirmed',\n        notes: ''\n      },\n      {\n        _id: 'appt2',\n        appointmentDate: '2025-04-15',\n        appointmentTime: '11:00',\n        patient: {\n          name: 'Michael Johnson',\n          email: 'michael.j@example.com',\n          phone: '+1 (555) 123-7890'\n        },\n        reason: 'Follow-up appointment after surgery.',\n        status: 'confirmed',\n        notes: 'Patient reported mild pain in the incision area.'\n      },\n      {\n        _id: 'appt3',\n        appointmentDate: '2025-04-16',\n        appointmentTime: '14:30',\n        patient: {\n          name: 'Emily Wilson',\n          email: 'emily.w@example.com',\n          phone: '+1 (555) 456-1230'\n        },\n        reason: 'First consultation for persistent headaches.',\n        status: 'pending',\n        notes: ''\n      },\n      {\n        _id: 'appt4',\n        appointmentDate: '2025-04-17',\n        appointmentTime: '10:15',\n        patient: {\n          name: 'Robert Brown',\n          email: 'robert.b@example.com',\n          phone: '+1 (555) 789-4560'\n        },\n        reason: 'Regular checkup for heart condition.',\n        status: 'completed',\n        notes: 'Patient is responding well to medication. Blood pressure normal.'\n      },\n      {\n        _id: 'appt5',\n        appointmentDate: '2025-04-18',\n        appointmentTime: '15:45',\n        patient: {\n          name: 'Sophia Garcia',\n          email: 'sophia.g@example.com',\n          phone: '+1 (555) 321-6547'\n        },\n        reason: 'Consultation about allergies and possible treatments.',\n        status: 'cancelled',\n        notes: 'Patient called to cancel due to scheduling conflict.'\n      }\n    ];\n  } catch (error) {\n    console.error('Error fetching appointments:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch doctor profile\n * @returns {Promise<Object>} Doctor profile\n */\nexport const fetchDoctorProfile = async () => {\n  try {\n    // In a real implementation, this would make an API call\n    // For demo purposes, we'll return mock data\n    return {\n      _id: 'demo-doctor-id',\n      name: 'Dr. John Smith',\n      specialization: 'Cardiologist',\n      email: 'john.smith@example.com',\n      phone: '+1 (555) 123-4567',\n      status: 'approved',\n      profilePicture: null,\n      qualifications: [\n        { degree: 'MD', institution: 'Harvard Medical School', year: '2010' },\n        { degree: 'Cardiology Specialization', institution: 'Mayo Clinic', year: '2015' }\n      ],\n      about: 'Experienced cardiologist with over 10 years of practice in treating various heart conditions.',\n      consultationFee: 150,\n      availability: {\n        monday: [{ start: '09:00', end: '12:00' }, { start: '14:00', end: '17:00' }],\n        tuesday: [{ start: '09:00', end: '12:00' }, { start: '14:00', end: '17:00' }],\n        wednesday: [{ start: '09:00', end: '12:00' }],\n        thursday: [{ start: '14:00', end: '17:00' }],\n        friday: [{ start: '09:00', end: '12:00' }, { start: '14:00', end: '17:00' }],\n        saturday: [],\n        sunday: []\n      }\n    };\n  } catch (error) {\n    console.error('Error fetching doctor profile:', error);\n    throw error;\n  }\n};\n\n/**\n * Update doctor profile\n * @param {Object} profileData - Updated profile data\n * @returns {Promise<Object>} Updated doctor profile\n */\nexport const updateDoctorProfile = async (profileData) => {\n  try {\n    // In a real implementation, this would make an API call\n    // For demo purposes, we'll just return the updated data\n    return { ...profileData, success: true };\n  } catch (error) {\n    console.error('Error updating doctor profile:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch doctor's unavailable dates\n * @returns {Promise<Array>} List of unavailable dates\n */\nexport const fetchDoctorUnavailableDates = async () => {\n  try {\n    // In a real implementation, this would make an API call\n    // For demo purposes, we'll return mock data\n    return [\n      { _id: 'date1', date: '2025-05-15', reason: 'Personal leave' },\n      { _id: 'date2', date: '2025-06-10', reason: 'Conference attendance' },\n      { _id: 'date3', date: '2025-06-11', reason: 'Conference attendance' },\n      { _id: 'date4', date: '2025-07-01', reason: 'Vacation' },\n      { _id: 'date5', date: '2025-07-02', reason: 'Vacation' },\n      { _id: 'date6', date: '2025-07-03', reason: 'Vacation' }\n    ];\n  } catch (error) {\n    console.error('Error fetching unavailable dates:', error);\n    throw error;\n  }\n};\n\n/**\n * Add an unavailable date\n * @param {string} date - Date in YYYY-MM-DD format\n * @param {string} reason - Reason for unavailability\n * @returns {Promise<Object>} Added unavailable date\n */\nexport const addUnavailableDate = async (date, reason) => {\n  try {\n    // In a real implementation, this would make an API call\n    // For demo purposes, we'll just return the data with a generated ID\n    const newDateId = 'date' + Date.now();\n    return { _id: newDateId, date, reason };\n  } catch (error) {\n    console.error('Error adding unavailable date:', error);\n    throw error;\n  }\n};\n\n/**\n * Remove an unavailable date\n * @param {string} dateId - ID of the unavailable date to remove\n * @returns {Promise<Object>} Confirmation of removal\n */\nexport const removeUnavailableDate = async (dateId) => {\n  try {\n    // In a real implementation, this would make an API call\n    // For demo purposes, we'll just return a success message\n    return { success: true };\n  } catch (error) {\n    console.error('Error removing unavailable date:', error);\n    throw error;\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}