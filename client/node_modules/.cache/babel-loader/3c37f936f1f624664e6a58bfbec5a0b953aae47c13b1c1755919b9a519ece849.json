{"ast":null,"code":"/**\n * Format date to display in a readable format\n * @param {string|Date} date - Date to format\n * @returns {string} Formatted date string\n */\nexport const formatDate = date => {\n  if (!date) return '';\n  const dateObj = new Date(date);\n  return dateObj.toLocaleDateString('en-US', {\n    weekday: 'short',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n};\n\n/**\n * Format time to display in a readable format\n * @param {string} time - Time string in HH:MM format\n * @returns {string} Formatted time string\n */\nexport const formatTime = time => {\n  if (!time) return '';\n  const [hours, minutes] = time.split(':');\n  const dateObj = new Date();\n  dateObj.setHours(parseInt(hours, 10));\n  dateObj.setMinutes(parseInt(minutes, 10));\n  return dateObj.toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n  });\n};\n\n/**\n * Check if a date is in the past\n * @param {string|Date} date - Date to check\n * @returns {boolean} True if date is in the past\n */\nexport const isDateInPast = date => {\n  if (!date) return false;\n  const dateObj = new Date(date);\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return dateObj < today;\n};\n\n/**\n * Get date in YYYY-MM-DD format\n * @param {Date} date - Date object\n * @returns {string} Date in YYYY-MM-DD format\n */\nexport const getFormattedDate = (date = new Date()) => {\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};","map":{"version":3,"names":["formatDate","date","dateObj","Date","toLocaleDateString","weekday","year","month","day","formatTime","time","hours","minutes","split","setHours","parseInt","setMinutes","toLocaleTimeString","hour","minute","hour12","isDateInPast","today","getFormattedDate","d","getFullYear","String","getMonth","padStart","getDate"],"sources":["/workspaces/DoctorDashboard/client/src/utils/dateUtils.js"],"sourcesContent":["/**\n * Format date to display in a readable format\n * @param {string|Date} date - Date to format\n * @returns {string} Formatted date string\n */\nexport const formatDate = (date) => {\n  if (!date) return '';\n  \n  const dateObj = new Date(date);\n  return dateObj.toLocaleDateString('en-US', {\n    weekday: 'short',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n};\n\n/**\n * Format time to display in a readable format\n * @param {string} time - Time string in HH:MM format\n * @returns {string} Formatted time string\n */\nexport const formatTime = (time) => {\n  if (!time) return '';\n  \n  const [hours, minutes] = time.split(':');\n  const dateObj = new Date();\n  dateObj.setHours(parseInt(hours, 10));\n  dateObj.setMinutes(parseInt(minutes, 10));\n  \n  return dateObj.toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n  });\n};\n\n/**\n * Check if a date is in the past\n * @param {string|Date} date - Date to check\n * @returns {boolean} True if date is in the past\n */\nexport const isDateInPast = (date) => {\n  if (!date) return false;\n  \n  const dateObj = new Date(date);\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  \n  return dateObj < today;\n};\n\n/**\n * Get date in YYYY-MM-DD format\n * @param {Date} date - Date object\n * @returns {string} Date in YYYY-MM-DD format\n */\nexport const getFormattedDate = (date = new Date()) => {\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  \n  return `${year}-${month}-${day}`;\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAIC,IAAI,IAAK;EAClC,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EAEpB,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAACF,IAAI,CAAC;EAC9B,OAAOC,OAAO,CAACE,kBAAkB,CAAC,OAAO,EAAE;IACzCC,OAAO,EAAE,OAAO;IAChBC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,MAAM;IACbC,GAAG,EAAE;EACP,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAIC,IAAI,IAAK;EAClC,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EAEpB,MAAM,CAACC,KAAK,EAAEC,OAAO,CAAC,GAAGF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC;EACxC,MAAMX,OAAO,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC1BD,OAAO,CAACY,QAAQ,CAACC,QAAQ,CAACJ,KAAK,EAAE,EAAE,CAAC,CAAC;EACrCT,OAAO,CAACc,UAAU,CAACD,QAAQ,CAACH,OAAO,EAAE,EAAE,CAAC,CAAC;EAEzC,OAAOV,OAAO,CAACe,kBAAkB,CAAC,OAAO,EAAE;IACzCC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE,SAAS;IACjBC,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAIpB,IAAI,IAAK;EACpC,IAAI,CAACA,IAAI,EAAE,OAAO,KAAK;EAEvB,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAACF,IAAI,CAAC;EAC9B,MAAMqB,KAAK,GAAG,IAAInB,IAAI,CAAC,CAAC;EACxBmB,KAAK,CAACR,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAE1B,OAAOZ,OAAO,GAAGoB,KAAK;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAACtB,IAAI,GAAG,IAAIE,IAAI,CAAC,CAAC,KAAK;EACrD,MAAMqB,CAAC,GAAG,IAAIrB,IAAI,CAACF,IAAI,CAAC;EACxB,MAAMK,IAAI,GAAGkB,CAAC,CAACC,WAAW,CAAC,CAAC;EAC5B,MAAMlB,KAAK,GAAGmB,MAAM,CAACF,CAAC,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACvD,MAAMpB,GAAG,GAAGkB,MAAM,CAACF,CAAC,CAACK,OAAO,CAAC,CAAC,CAAC,CAACD,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAEhD,OAAO,GAAGtB,IAAI,IAAIC,KAAK,IAAIC,GAAG,EAAE;AAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}